@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using Amazon.S3
@using Amazon.S3.Model
@using Amazon.S3.Transfer
@using Amazon.DynamoDBv2
@using Amazon.DynamoDBv2.DocumentModel
@inject IAmazonDynamoDB DynamoDBClient
@inject IAmazonS3 S3Client
@inject IServiceProvider ServiceProvider

<h3>File Upload</h3>

<InputFile OnChange="HandleFileSelected" />
<p>@UploadMessage</p>
<button @onclick="UploadFile" class="btn btn-primary" disabled="@IsButtonDisabled">Upload to S3</button>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <p class="text-success">@SuccessMessage</p>
}

<!-- Modal -->
<div class="modal @ModalClass" tabindex="-1" style="display: @(IsModalVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="font-size: 1.5rem;">
                <h5 class="modal-title">Uploading...</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <p>Uploading your file, please wait...</p>
            </div>
        </div>
    </div>
</div>

<h3>Files in DynamoDB Table</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Text</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @if (DynamoDBItems.Count == 0)
        {
            <tr>
                <td colspan="3">No data available in the DynamoDB table.</td>
            </tr>
        }
        else
        {
            @foreach (var item in DynamoDBItems)
            {
                <tr>
                    <td>@item["Id"]</td>
                    <td>@(item["Text"]?.ToString()?.Length > 2000 ? item["Text"].ToString()?.Substring(0, 2000) + "..." : item["Text"])</td>
                    <td>@item["Timestamp"]</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private IBrowserFile? SelectedFile;
    private string? UploadMessage;
    private string? SuccessMessage;
    private bool IsButtonDisabled = true;
    private bool IsUploading = false;
    private string? FileExtension;
    private bool IsModalVisible = false;
    private string ModalClass => IsModalVisible ? "show" : "";
    private List<Document> DynamoDBItems = new List<Document>();

    private async Task ListDynamoDBItems()
    {
        Console.WriteLine("Calling ListDynamoDBItems");
        // try
        // {
            var tableName = "AssemblyAI"; // Replace with your DynamoDB table name
            var table = Table.LoadTable(DynamoDBClient, tableName);
            var search = table.Scan(new ScanFilter());
            DynamoDBItems = await search.GetNextSetAsync();
            Console.WriteLine($"Table contains {DynamoDBItems.Count} items");
            
        // }
        // catch (Exception ex)
        // {
        //     UploadMessage = $"Error loading DynamoDB data: {ex.Message}";
        // }
        // finally
        // {
        //     //await InvokeAsync(StateHasChanged);
        // }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        FileExtension = Path.GetExtension(SelectedFile.Name);
        UploadMessage = $"File selected: {SelectedFile?.Name}";
        IsButtonDisabled = SelectedFile == null;
    }

    private async Task UploadFile()
    {
        if (SelectedFile is not null && !IsUploading)
        {
            try
            {
                IsUploading = true;
                IsButtonDisabled = true;
                IsModalVisible = true;

                var bucketName = "assemblyai-challenge"; // Replace with your S3 bucket name
                var fileKey = $"{Guid.NewGuid()}{FileExtension}";

                await using var stream = SelectedFile.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024); // 100 MB max
                var transferUtility = new TransferUtility(S3Client);
                await transferUtility.UploadAsync(stream, bucketName, fileKey);

                SuccessMessage = $"File uploaded successfully to S3: {fileKey}";
            }
            catch (Exception ex)
            {
                SuccessMessage = $"Error uploading file: {ex.Message}";
            }
            finally
            {
                IsModalVisible = false;
                IsUploading = false;
                IsButtonDisabled = false;

                await ListDynamoDBItems();
            }
        }
    }

    private void HideModal()
    {
        IsModalVisible = false;
    }

    private async Task RefreshDynamoDbTable()
    {
        Console.WriteLine("RefreshDynamoDbTable Invoked");
        await ListDynamoDBItems();
        UploadMessage = $"Table refreshed at {DateTime.Now.ToLongTimeString()}";
        await InvokeAsync(StateHasChanged);
    }
    private bool _isInitialized;
    private SqsBackgroundService _backgroundService;

    protected override async Task OnInitializedAsync()
    {
        if (_isInitialized) return;
        _isInitialized = true;

        await base.OnInitializedAsync();

        var sqsService = ServiceProvider.GetRequiredService<SqsService>();
        _backgroundService = new SqsBackgroundService(sqsService, RefreshDynamoDbTable);

        _ = _backgroundService.StartAsync(CancellationToken.None);
        await ListDynamoDBItems(); // Load initial data
    }
    public async ValueTask DisposeAsync()
    {
        // Cleanup the background service when the component is disposed
        if (_backgroundService != null)
        {
            await _backgroundService.StopAsync(CancellationToken.None);
        }
    }
}
